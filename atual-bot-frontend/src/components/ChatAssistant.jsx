import { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  MessageCircle, 
  X, 
  Send, 
  Bot,
  Minimize2,
  Maximize2,
  HelpCircle,
  Settings,
  Zap,
  Book,
  Code,
  Server,
  Smartphone
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';

const ChatAssistant = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [messages, setMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [aiMode, setAiMode] = useState(false); // false = base de conhecimento, true = IA
  const messagesEndRef = useRef(null);

  // Base de conhecimento embarcada
  const knowledgeBase = {
    'configura√ß√£o': {
      title: 'Configura√ß√£o da Ferramenta',
      content: `Para configurar o Atual.bot, siga estes passos:

1. **Configura√ß√£o de IA**: Acesse o menu "IA" e selecione seu provedor preferido (ChatGPT, Gemini, Claude, etc.). Insira sua chave API e teste a conex√£o.

2. **Configura√ß√£o de Vagas**: No menu "Vagas", configure os filtros de coleta (estado, cidade, sal√°rio m√≠nimo, categoria). Todos os 27 estados do Brasil est√£o dispon√≠veis.

3. **Configura√ß√£o de Grupos**: O sistema detecta automaticamente os grupos onde voc√™ est√° conectado. Use o menu "Grupos" para gerenciar e descobrir novos grupos.

4. **Configura√ß√£o do AdSense**: No menu "AdSense", configure suas credenciais para monetiza√ß√£o (Publisher ID, Ad Client ID).`,
      tags: ['configura√ß√£o', 'setup', 'inicial']
    },
    'instala√ß√£o': {
      title: 'Instala√ß√£o e Deploy',
      content: `**Requisitos do Sistema:**
- Python 3.11+
- Node.js 20+
- 2GB RAM m√≠nimo
- 10GB espa√ßo em disco

**Instala√ß√£o Local:**
1. Extraia o arquivo ZIP
2. Execute: \`cd atual-bot-backend && pip install -r requirements.txt\`
3. Execute: \`cd atual-bot-frontend && npm install\`
4. Inicie o backend: \`python src/main.py\`
5. Inicie o frontend: \`npm run dev\`

**Deploy em Produ√ß√£o:**
- **VPS Recomendadas**: DigitalOcean, Linode, AWS EC2
- **Configura√ß√£o m√≠nima**: 2GB RAM, 2 vCPUs
- **Portas necess√°rias**: 5000 (backend), 3000 (frontend)
- **SSL**: Configure certificado SSL para HTTPS`,
      tags: ['instala√ß√£o', 'deploy', 'servidor', 'vps']
    },
    'grupos': {
      title: 'Gerenciamento de Grupos',
      content: `**Como Funciona:**
O sistema detecta automaticamente todos os grupos onde sua conta est√° conectada (WhatsApp, Facebook, Telegram).

**Recursos Dispon√≠veis:**
- Ranking autom√°tico por engajamento
- An√°lise de qualidade dos grupos
- Descoberta de novos grupos com IA
- M√©tricas detalhadas (membros, mensagens/dia)

**Conectar Contas:**
1. WhatsApp: Escaneie o QR Code
2. Facebook: Fa√ßa login via OAuth
3. Telegram: Use o Bot Token

**Dicas:**
- Grupos com 80%+ de engajamento s√£o considerados excelentes
- O sistema prioriza grupos com mais atividade
- Use a busca inteligente para encontrar grupos relevantes`,
      tags: ['grupos', 'whatsapp', 'facebook', 'telegram']
    },
    'vagas': {
      title: 'Sistema de Vagas',
      content: `**Coleta Autom√°tica:**
O sistema coleta vagas automaticamente baseado nos filtros configurados.

**Filtros Dispon√≠veis:**
- Estado: Todos os 27 estados do Brasil
- Cidade: Qualquer cidade brasileira
- Sal√°rio: Faixas de R$ 1.000 a R$ 10.000+
- Categoria: 15+ categorias profissionais
- Palavras-chave: Termos espec√≠ficos

**Funcionamento:**
1. Configure os filtros desejados
2. Clique em "Iniciar Coleta"
3. O sistema busca vagas 24/7
4. Vagas s√£o publicadas automaticamente nos grupos
5. Acompanhe o desempenho no Analytics

**Com IA Ativa:**
- An√°lise inteligente de qualidade das vagas
- Filtragem autom√°tica de spam
- Otimiza√ß√£o de hor√°rios de postagem`,
      tags: ['vagas', 'coleta', 'filtros', 'automa√ß√£o']
    },
    'monetiza√ß√£o': {
      title: 'Sistema de Monetiza√ß√£o',
      content: `**Google AdSense:**
Configure suas credenciais do AdSense para monetizar o tr√°fego.

**Configura√ß√£o:**
1. Publisher ID: Seu ID do AdSense (pub-xxxxxxxxx)
2. Ad Client ID: ID do cliente (ca-pub-xxxxxxxxx)
3. Ad Slot ID: ID do slot (opcional)

**Como Funciona:**
- Quando algu√©m clica em uma vaga/not√≠cia
- Uma p√°gina intermedi√°ria com an√∫ncio √© exibida
- Ap√≥s alguns segundos, o usu√°rio pode prosseguir
- Voc√™ ganha por cada visualiza√ß√£o/clique

**Configura√ß√µes:**
- Tempo de exibi√ß√£o: 3-30 segundos
- Delay do bot√£o pular: 0-10 segundos
- Ativar/desativar por tipo de conte√∫do

**Ganhos Esperados:**
- Depende do tr√°fego e nicho
- CTR m√©dio: 1-5%
- RPM: $0.50-$5.00`,
      tags: ['monetiza√ß√£o', 'adsense', 'ganhos', 'an√∫ncios']
    },
    'analytics': {
      title: 'Analytics e Relat√≥rios',
      content: `**M√©tricas Dispon√≠veis:**
- Total de cliques e visualiza√ß√µes
- Taxa de convers√£o
- Engajamento por grupo
- Performance por plataforma
- Ganhos do AdSense

**Gr√°ficos:**
- Performance ao longo do tempo
- Distribui√ß√£o por tipo de conte√∫do
- Ranking de grupos
- Comparativo entre plataformas

**Exporta√ß√£o:**
- Relat√≥rios em PDF
- Dados em CSV
- Gr√°ficos em PNG

**Filtros:**
- √öltimas 24h, 7 dias, 30 dias, 90 dias
- Por grupo espec√≠fico
- Por tipo de conte√∫do
- Por plataforma`,
      tags: ['analytics', 'relat√≥rios', 'm√©tricas', 'gr√°ficos']
    },
    'ia': {
      title: 'Intelig√™ncia Artificial',
      content: `**Provedores Suportados:**
- ChatGPT (3.5, 4, 4o)
- Gemini (1.5 Pro, Flash)
- Claude (3 Opus, Sonnet, Haiku)
- Llama 3, Mistral, Qwen
- Manus, Perplexity, Command R+

**Funcionalidades com IA:**
- An√°lise inteligente de grupos
- Otimiza√ß√£o de conte√∫do
- Filtragem autom√°tica de spam
- Sugest√µes de melhoria
- An√°lise de sentimento

**Modo Dual:**
- **Sem IA**: Funciona como script b√°sico
- **Com IA**: Recursos avan√ßados ativados

**Configura√ß√£o:**
1. Selecione o provedor
2. Insira a chave API
3. Teste a conex√£o
4. Salve a configura√ß√£o

**Custos:**
- Varia por provedor
- Uso moderado: $5-20/m√™s
- Uso intenso: $20-100/m√™s`,
      tags: ['ia', 'chatgpt', 'gemini', 'claude', 'api']
    },
    'troubleshooting': {
      title: 'Solu√ß√£o de Problemas',
      content: `**Problemas Comuns:**

**1. Erro de Conex√£o com IA:**
- Verifique se a chave API est√° correta
- Confirme se h√° cr√©ditos na conta
- Teste com outro provedor

**2. Grupos N√£o Aparecem:**
- Verifique se est√° logado nas contas
- Reescaneie o QR Code do WhatsApp
- Reconecte as contas sociais

**3. Vagas N√£o S√£o Coletadas:**
- Verifique os filtros configurados
- Confirme se a coleta est√° ativa
- Verifique a conex√£o com internet

**4. AdSense N√£o Funciona:**
- Confirme as credenciais
- Verifique se a conta est√° aprovada
- Teste com an√∫ncios de teste

**5. Performance Lenta:**
- Verifique recursos do servidor
- Otimize os filtros de busca
- Considere upgrade do plano`,
      tags: ['problemas', 'erro', 'troubleshooting', 'suporte']
    }
  };

  const quickActions = [
    { icon: Settings, label: 'Configura√ß√£o Inicial', query: 'configura√ß√£o' },
    { icon: Server, label: 'Como Instalar', query: 'instala√ß√£o' },
    { icon: Smartphone, label: 'Conectar Grupos', query: 'grupos' },
    { icon: Zap, label: 'Configurar IA', query: 'ia' },
    { icon: HelpCircle, label: 'Problemas', query: 'troubleshooting' }
  ];

  useEffect(() => {
    if (isOpen && messages.length === 0) {
      setMessages([
        {
          id: 1,
          type: 'bot',
          content: `Ol√°! üëã Sou o assistente do Atual.bot.

Posso ajudar voc√™ com:
‚Ä¢ Configura√ß√£o da ferramenta
‚Ä¢ Instala√ß√£o e deploy
‚Ä¢ Gerenciamento de grupos
‚Ä¢ Sistema de IA e monetiza√ß√£o
‚Ä¢ Solu√ß√£o de problemas

${aiMode ? 'ü§ñ **Modo IA Ativo** - Respostas inteligentes' : 'üìö **Modo Base de Conhecimento** - Respostas r√°pidas'}

Como posso ajudar voc√™ hoje?`,
          timestamp: new Date()
        }
      ]);
    }
  }, [isOpen, aiMode]);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return;

    const userMessage = {
      id: Date.now(),
      type: 'user',
      content: inputMessage,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsTyping(true);

    // Simular resposta do assistente
    setTimeout(() => {
      const response = generateResponse(inputMessage);
      const botMessage = {
        id: Date.now() + 1,
        type: 'bot',
        content: response,
        timestamp: new Date()
      };
      setMessages(prev => [...prev, botMessage]);
      setIsTyping(false);
    }, 1500);
  };

  const generateResponse = (query) => {
    const lowerQuery = query.toLowerCase();
    
    // Buscar na base de conhecimento
    for (const [key, data] of Object.entries(knowledgeBase)) {
      if (data.tags.some(tag => lowerQuery.includes(tag)) || lowerQuery.includes(key)) {
        return `**${data.title}**\n\n${data.content}`;
      }
    }

    // Respostas para perguntas espec√≠ficas
    if (lowerQuery.includes('pre√ßo') || lowerQuery.includes('custo')) {
      return `**Custos do Atual.bot:**

‚Ä¢ **Ferramenta**: Licen√ßa √∫nica (consulte o desenvolvedor)
‚Ä¢ **Hospedagem**: $10-50/m√™s (VPS)
‚Ä¢ **IA**: $5-100/m√™s (dependendo do uso)
‚Ä¢ **AdSense**: Gratuito (Google)

**ROI Esperado:**
Com boa configura√ß√£o, a ferramenta pode se pagar em 1-3 meses atrav√©s da monetiza√ß√£o.`;
    }

    if (lowerQuery.includes('suporte') || lowerQuery.includes('ajuda')) {
      return `**Canais de Suporte:**

‚Ä¢ **WhatsApp**: +55 41 99777-1355 (Edu Lima)
‚Ä¢ **Documenta√ß√£o**: Menu "Ajuda" da ferramenta
‚Ä¢ **Este Assistente**: Dispon√≠vel 24/7

**Hor√°rio de Atendimento:**
Segunda a Sexta: 9h √†s 18h (hor√°rio de Bras√≠lia)

**Tempo de Resposta:**
‚Ä¢ WhatsApp: At√© 2 horas
‚Ä¢ Email: At√© 24 horas`;
    }

    // Resposta padr√£o
    return `Desculpe, n√£o encontrei informa√ß√µes espec√≠ficas sobre "${query}".

**T√≥picos que posso ajudar:**
‚Ä¢ Configura√ß√£o e instala√ß√£o
‚Ä¢ Gerenciamento de grupos
‚Ä¢ Sistema de IA
‚Ä¢ Monetiza√ß√£o com AdSense
‚Ä¢ Analytics e relat√≥rios
‚Ä¢ Solu√ß√£o de problemas

Ou entre em contato via WhatsApp: +55 41 99777-1355`;
  };

  const handleQuickAction = (query) => {
    setInputMessage(query);
    handleSendMessage();
  };

  const toggleAiMode = () => {
    setAiMode(!aiMode);
    const modeMessage = {
      id: Date.now(),
      type: 'system',
      content: `Modo ${!aiMode ? 'IA' : 'Base de Conhecimento'} ativado!`,
      timestamp: new Date()
    };
    setMessages(prev => [...prev, modeMessage]);
  };

  if (!isOpen) {
    return (
      <motion.div
        initial={{ scale: 0 }}
        animate={{ scale: 1 }}
        className="fixed bottom-6 left-6 z-50"
      >
        <Button
          onClick={() => setIsOpen(true)}
          className="w-14 h-14 rounded-full cyber-gradient hover-glow shadow-lg"
          title="Assistente de Suporte"
        >
          <MessageCircle className="w-6 h-6" />
        </Button>
      </motion.div>
    );
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className={`fixed bottom-6 left-6 z-50 ${
        isMinimized ? 'w-80 h-16' : 'w-96 h-[600px]'
      } bg-background border border-border rounded-lg shadow-2xl glass cyber-border`}
    >
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b border-border">
        <div className="flex items-center space-x-3">
          <div className="p-2 cyber-gradient rounded-lg">
            <Bot className="w-5 h-5 text-white" />
          </div>
          <div>
            <h3 className="font-semibold">Assistente Atual.bot</h3>
            <div className="flex items-center space-x-2">
              <Badge variant={aiMode ? 'default' : 'outline'} className="text-xs">
                {aiMode ? 'ü§ñ IA' : 'üìö KB'}
              </Badge>
              <span className="text-xs text-green-500">‚óè Online</span>
            </div>
          </div>
        </div>

        <div className="flex items-center space-x-2">
          <Button
            variant="ghost"
            size="sm"
            onClick={toggleAiMode}
            title={`Alternar para modo ${aiMode ? 'Base de Conhecimento' : 'IA'}`}
          >
            <Zap className="w-4 h-4" />
          </Button>
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setIsMinimized(!isMinimized)}
          >
            {isMinimized ? <Maximize2 className="w-4 h-4" /> : <Minimize2 className="w-4 h-4" />}
          </Button>
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setIsOpen(false)}
          >
            <X className="w-4 h-4" />
          </Button>
        </div>
      </div>

      {!isMinimized && (
        <>
          {/* Quick Actions */}
          <div className="p-4 border-b border-border">
            <div className="grid grid-cols-2 gap-2">
              {quickActions.map((action, index) => {
                const Icon = action.icon;
                return (
                  <Button
                    key={index}
                    variant="outline"
                    size="sm"
                    onClick={() => handleQuickAction(action.query)}
                    className="justify-start text-xs cyber-border"
                  >
                    <Icon className="w-3 h-3 mr-2" />
                    {action.label}
                  </Button>
                );
              })}
            </div>
          </div>

          {/* Messages */}
          <div className="flex-1 overflow-y-auto p-4 space-y-4 h-96">
            <AnimatePresence>
              {messages.map((message) => (
                <motion.div
                  key={message.id}
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  <div
                    className={`max-w-[80%] p-3 rounded-lg ${
                      message.type === 'user'
                        ? 'cyber-gradient text-white'
                        : message.type === 'system'
                        ? 'bg-yellow-500/20 text-yellow-500 border border-yellow-500/30'
                        : 'bg-muted'
                    }`}
                  >
                    <div className="text-sm whitespace-pre-wrap">{message.content}</div>
                    <div className="text-xs opacity-70 mt-1">
                      {message.timestamp.toLocaleTimeString('pt-BR', { 
                        hour: '2-digit', 
                        minute: '2-digit' 
                      })}
                    </div>
                  </div>
                </motion.div>
              ))}
            </AnimatePresence>

            {isTyping && (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="flex justify-start"
              >
                <div className="bg-muted p-3 rounded-lg">
                  <div className="flex space-x-1">
                    <div className="w-2 h-2 bg-primary rounded-full animate-bounce"></div>
                    <div className="w-2 h-2 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                    <div className="w-2 h-2 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                  </div>
                </div>
              </motion.div>
            )}
            <div ref={messagesEndRef} />
          </div>

          {/* Input */}
          <div className="p-4 border-t border-border">
            <div className="flex space-x-2">
              <Input
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                placeholder="Digite sua pergunta..."
                className="flex-1 cyber-border"
              />
              <Button
                onClick={handleSendMessage}
                disabled={!inputMessage.trim() || isTyping}
                className="cyber-gradient hover-glow"
              >
                <Send className="w-4 h-4" />
              </Button>
            </div>
          </div>
        </>
      )}
    </motion.div>
  );
};

export default ChatAssistant;

